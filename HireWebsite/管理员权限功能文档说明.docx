管理员权限功能说明:
1.管理员登录:
在初始化数据库建表成功后的时机，我们初始化一个超级管理员权限账号:初始化这个账号的原因是赋予此系统一个超级权限，此管理员是固定切不可动摇的，是实现各层次目标的需要 ，贯彻分级管理原则的需要， 集中权力的需要，也是 调动下级的需要（大神丶老板）,相应的数据库字段只取username,password,type,post四个字段并新增一个管理员type值，新增一个变量将mongoose中已经发布的User对象复制它，调用mongoose工具类中的model对象的findOne方法进行查询，首先判断admin账号是否已经初始化，若已初始化，则不再初始化超级管理员，在控制台输出；若不存在则用user表对象的create方进行创建，此处参数必须为一个对象，这是mongoDB作为一个ORM数据库操作框架的标准及规定，创建成功，由于返回的结果是一个异步即promise对象所以需要用then来进行取值，若是promise中的resolve状态则进入then的回调函数中，否则进入catch捕获状态回调函数中进行异常的抛出(即reject状态)。

之后 我们便可以基于之前做好的登录功能使用此账号登录系统，登录系统后前台会根据登录的身份也就是我们存的type值进行判断，若是管理员，由前台进行判断返回相应的路由模块进行显示: 具体实现操作为：
从redux的store对象中取出用户登录信息并初始化，此处由于取到值的时候异步操作(也就是登录请求)还未完成，所以利用store对象自带的订阅者对象进行绑定，当redux值更新的时候更新此组件的model层(及state中的值)并同时判断登录用户的身份，若为管理员则返回admin路由对象。


管理员成功登录，初始化的界面为大神的列表界面，可以在此处对注册的大神进行增删改查操作，若需要切换为老板与招聘信息则可以点击tab进行切换，在tab中绑定了回调当tab变化传入回调函数取传入的第一个形参给定义在此组件中model层的showFlag进行赋值，由于组件的通用性，本组件并未采用子路由的方式进行开发，而是采用组件封装多次复用的方式进行开发，目的是让一个组件共用多个model层数据及多个ajax请求的复用。

2.管理员权限操作(对大神丶老板丶招聘信息拥有增删改查的权限操作)
大神与老板：
增加：根据定义的数据库表字段进行增加，注：大神属于求职类人员，不存在招聘要求，招聘月薪等字段。调用user表对象所封装的findOne方法传入需要创建的对象进行查找，若存在此用户则返回查到的对象，并取到对象进行服务端返回操作，此步骤不可忘记，否则会出现客户端一直请求而未收到相应的状态和错误。resolve状态的数据会自动作为then方法中的第一个参数，而reject状态中的数据则会自动作为catch方法的第一个参数进行回传。
代码片段:

修改:修改分为回显和保存修改两个部分，回显通过数据库唯一ID进行查询获得，保存修改时，前台应传入所修改的对象ID及修改的数据由后台进行判断和保存到数据库，在众多的修改功能中，回显的功能是必不可少的，能让用户及时看到当前所编辑的对象信息，并根据自己的需求进行修改，前端只需要传递需要查询对象的唯一ID，后台便能根据传入的ID调用表对象的findOne方法进行查询，将查询到的对象返回给前端，再由前端进行model层的更新与view层的跟随更新，对用户的体验十分友好。

回显完毕后，用户根据自己的需求进行view层的数据修改，再由相应的钩子函数捕获到用户所修改的值更新model层，最后用于异步请求，传入的参数必须含有当前编辑对象的唯一ID及用户更新后的model层数据对象，此处由于使用了antd-mobile可以直接利用受控组件对象的getFields进行表单域值的获取，后端收到唯一ID及用户更新后的数据对象后，直接调用mongoose类中user表对象中的update方法进行更新，第一个参数为需要查询的条件，须为一个对象，第二个参数为查到到对象后需要更新的对象中所含有的数据对象，在then和catch中获取结果，成功则返回前后端约定的数据格式，失败亦如此。前端收到相应的结果后进行判断和提示用户及model层和view层的更新，便于用户友好的体验，可用antd-mobile中的Modal组件和Toast组价进行友好提示。

删除：通过数据库字段唯一ID进行删除，由前台传递，由后台接收并处理:
代码片段：

查询:根据输入的大神名称或老板名称进行模糊查询，岗位进行精确查询，查询完毕后前台更新显示列表数组进行显示。
代码片段：

3.招聘信息的处理:
需要单独将招聘信息的老板对象某些字段置为空，再由前端判断不显示招聘信息为空的对象成员，即可实现老板账号依旧存在，招聘信息为空的功能。
代码片段:


增查改:同老板和大神相同。
4.退出
同普通功能一样删除cookies并跳转到登录页.
代码片段:

前端新增文件:

利用react组件拆分和多组件重复使用的特性进行开发，使用的开发框架为antd-mobile。
编辑个人信息：
1.新增路由对象：

2.配置路由模块:

3.修改个人信息流程：
1.通过redux在登录时储存的用户_id进行页面初始请求 请求到改用户的初始数据并填入相应表单，通过type字段判断是老板或是大神而对应显示相应的表单元素:


2.点击保存 调api文件夹中储存的index.js文件中的reqPostEdit接口 并传入用户id 和输入的信息进行储存。（通老板和大神）

3.返回上一级界面 并根据用户ID请求最新的数据进行model层的数据更新与view层的渲染更新。

管理员权限功能说明:
1.管理员登录:
在初始化数据库建表成功后的时机，我们初始化一个超级管理员权限账号:初始化这个账号的原因是赋予此系统一个超级权限，此管理员是固定切不可动摇的，是实现各层次目标的需要 ，贯彻分级管理原则的需要， 集中权力的需要，也是 调动下级的需要（大神丶老板）,相应的数据库字段只取username,password,type,post四个字段并新增一个管理员type值，新增一个变量将mongoose中已经发布的User对象复制它，调用mongoose工具类中的model对象的findOne方法进行查询，首先判断admin账号是否已经初始化，若已初始化，则不再初始化超级管理员，在控制台输出；若不存在则用user表对象的create方进行创建，此处参数必须为一个对象，这是mongoDB作为一个ORM数据库操作框架的标准及规定，创建成功，由于返回的结果是一个异步即promise对象所以需要用then来进行取值，若是promise中的resolve状态则进入then的回调函数中，否则进入catch捕获状态回调函数中进行异常的抛出(即reject状态)。

之后 我们便可以基于之前做好的登录功能使用此账号登录系统，登录系统后前台会根据登录的身份也就是我们存的type值进行判断，若是管理员，由前台进行判断返回相应的路由模块进行显示: 具体实现操作为：
从redux的store对象中取出用户登录信息并初始化，此处由于取到值的时候异步操作(也就是登录请求)还未完成，所以利用store对象自带的订阅者对象进行绑定，当redux值更新的时候更新此组件的model层(及state中的值)并同时判断登录用户的身份，若为管理员则返回admin路由对象。


管理员成功登录，初始化的界面为大神的列表界面，可以在此处对注册的大神进行增删改查操作，若需要切换为老板与招聘信息则可以点击tab进行切换，在tab中绑定了回调当tab变化传入回调函数取传入的第一个形参给定义在此组件中model层的showFlag进行赋值，由于组件的通用性，本组件并未采用子路由的方式进行开发，而是采用组件封装多次复用的方式进行开发，目的是让一个组件共用多个model层数据及多个ajax请求的复用。

2.管理员权限操作(对大神丶老板丶招聘信息拥有增删改查的权限操作)
大神与老板：
增加：根据定义的数据库表字段进行增加，注：大神属于求职类人员，不存在招聘要求，招聘月薪等字段。调用user表对象所封装的findOne方法传入需要创建的对象进行查找，若存在此用户则返回查到的对象，并取到对象进行服务端返回操作，此步骤不可忘记，否则会出现客户端一直请求而未收到相应的状态和错误。resolve状态的数据会自动作为then方法中的第一个参数，而reject状态中的数据则会自动作为catch方法的第一个参数进行回传。
代码片段:

修改:修改分为回显和保存修改两个部分，回显通过数据库唯一ID进行查询获得，保存修改时，前台应传入所修改的对象ID及修改的数据由后台进行判断和保存到数据库，在众多的修改功能中，回显的功能是必不可少的，能让用户及时看到当前所编辑的对象信息，并根据自己的需求进行修改，前端只需要传递需要查询对象的唯一ID，后台便能根据传入的ID调用表对象的findOne方法进行查询，将查询到的对象返回给前端，再由前端进行model层的更新与view层的跟随更新，对用户的体验十分友好。

回显完毕后，用户根据自己的需求进行view层的数据修改，再由相应的钩子函数捕获到用户所修改的值更新model层，最后用于异步请求，传入的参数必须含有当前编辑对象的唯一ID及用户更新后的model层数据对象，此处由于使用了antd-mobile可以直接利用受控组件对象的getFields进行表单域值的获取，后端收到唯一ID及用户更新后的数据对象后，直接调用mongoose类中user表对象中的update方法进行更新，第一个参数为需要查询的条件，须为一个对象，第二个参数为查到到对象后需要更新的对象中所含有的数据对象，在then和catch中获取结果，成功则返回前后端约定的数据格式，失败亦如此。前端收到相应的结果后进行判断和提示用户及model层和view层的更新，便于用户友好的体验，可用antd-mobile中的Modal组件和Toast组价进行友好提示。

删除：通过数据库字段唯一ID进行删除，由前台传递，由后台接收并处理:
代码片段：

查询:根据输入的大神名称或老板名称进行模糊查询，岗位进行精确查询，查询完毕后前台更新显示列表数组进行显示。
代码片段：

3.招聘信息的处理:
需要单独将招聘信息的老板对象某些字段置为空，再由前端判断不显示招聘信息为空的对象成员，即可实现老板账号依旧存在，招聘信息为空的功能。
代码片段:


增查改:同老板和大神相同。
4.退出
同普通功能一样删除cookies并跳转到登录页.
代码片段:

前端新增文件:

利用react组件拆分和多组件重复使用的特性进行开发，使用的开发框架为antd-mobile。
编辑个人信息：
1.新增路由对象：

2.配置路由模块:

3.修改个人信息流程：
1.通过redux在登录时储存的用户_id进行页面初始请求 请求到改用户的初始数据并填入相应表单，通过type字段判断是老板或是大神而对应显示相应的表单元素:


2.点击保存 调api文件夹中储存的index.js文件中的reqPostEdit接口 并传入用户id 和输入的信息进行储存。（通老板和大神）

3.返回上一级界面 并根据用户ID请求最新的数据进行model层的数据更新与view层的渲染更新。

