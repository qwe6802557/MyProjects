## **全栈项目笔记：**

**创建main.js文件入口，配置babel**：配置项命令：

`npm install --save-dev babel-preset-es2015`

`npm install babel-register --save-dev`

`npm install --save-dev babel-preset-es2015`



--save 与--save-dev中一个是保存到package.json中的dependence 一个是devDependencies 在上线的时候用nom install --production 可以选择不安装devDependencies中的内容 这样减少了插件的大小。

在main.js中引入：

```
require('babel-register');
require('./app.js');
```

由于入口文件变为main.js，运行的时候运行npm main.js  不再是app.js

### React项目踩坑：

#### 1.在onClick传参的时候一定要（）=>this.functon(参数)；且不能在点击的回调中传 否则默认为传了event事件实参。

#### 2.相同路由开头如/product与/product/detail开头的路由菜单不选中和展开BUG，解决方案：

![1574674363719](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1574674363719.png)

![1574674553837](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1574674553837.png)

#### 3.withRouter的作用：

###### _1.目的就是让被修饰的组件可以从属性中获取history,location,match

 路由组件可以直接获取这些属性，而非路由组件就必须通过withRouter修饰后才能获取这些属性了 

###### _2.withRouter是专门用来处理数据更新问题的。

使用一些redux的的`connect()`或者mobx的`inject()`的组件中，如果依赖于路由的更新要重新渲染，会出现路由更新了但是组件没有重新渲染的情况。这是因为redux和mobx的这些连接方法会修改组件的`shouldComponentUpdate`。

在使用withRouter解决更新问题的时候，一定要保证withRouter在最外层，比如`withRouter(connect(Component))`

#### 4.过滤变量ES6写法：

![1579165929704](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1579165929704.png)

**5.一键搭建react项目：**详细： https://www.cnblogs.com/newCoo/p/11341448.html 

![1582714296073](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582714296073.png)

![1582714307935](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582714307935.png)

![1582714342192](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582714342192.png)

![1582714356309](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582714356309.png)

![1582714427908](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582714427908.png)

![1582714442672](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582714442672.png)

![1582714457264](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582714457264.png)

![1582714472432](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582714472432.png)

![1582716460275](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582716460275.png)

### vue管理系统项目踩坑：

1.egg和koa中间件中用async函数后面next()的时候一定要加await.否则ctx.body不执行。

![1574324520201](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1574324520201.png)

2.在vue-cli 2.0中定义async函数时默认是没有安装babel-transform-runtime来转化为ES5语法的 所以需要安装及配置后才能定义。

![1574324931243](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1574324931243.png)

3.使用v-model绑定表格类每个对象动态变化时使用遍历等方式增加新属性进行双向绑定。

elemenui表格为例：![1574328509613](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1574328509613.png)

4.需要实现路由按需加载的话，如果使用的是 Babel，你将需要添加 syntax-dynamic-import 插件，才能使 Babel 可以正确地解析语法。

![1574660933998](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1574660933998.png)

![1574661258101](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1574661258101.png)

在vue-cli中使用import按需引入：

![1574666119748](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1574666119748.png)

5.elementUI踩坑：el-dialog的body部分是懒加载而非一开始就加载：所以一开始调用resetFields方法会报错，解决方案为延迟resetFields的调用，让dom先渲染出来。  以及表单的resetFields方法初始值指定的BUG：若点了编辑再点添加，编辑时初始值就已经是有数据了，因此解决方案为延迟赋值，让body先渲染出来，初始值为空，再赋值。

![1575509647968](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1575509647968.png)

![1575509662951](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1575509662951.png)

6.vue中使用Jquery:

 @1.npm install jquery --save-dev 
	

    @2.找到build文件夹下的webpack.base.conf.js
    第一行加入
        var webpack=require('webpack')
    
    在module.exports中加入
        plugins: [ 
               new webpack.ProvidePlugin({ 
                 $:"jquery", 
                 jQuery:"jquery", 
                "windows.jQuery":"jquery"
                }) 
    
              ]   

7.使用egg-socket.io时，在定义中间件的时候需要从ctx.app获得需要的app挂载的参数，而不能直接使用app.

![1577067075456](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1577067075456.png)

8.使用map做模糊搜索功能时，注意map是映射作用，映射前后的数组长度不变，不满足条件的值为undefined，数组长度不变，需要过滤改变数组长度应用filter。

![1577156142533](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1577156142533.png)

9.使用事件绑定时，对于不是原生JS绑定，在每次组件或者部分页面销毁时，要销毁事件，否则会导致事件绑定重复。

![1577171280772](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1577171280772.png)

10.使用egg-socket.io时注意：（大坑）

![1578642935184](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1578642935184.png)

11.使用egg-socket.io时的几种常用推送：

![1578884662517](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1578884662517.png)

![1578885898646](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1578885898646.png)

12.egg-suqulize定义外键关联的几种方式：

![1578985079111](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1578985079111.png)

![1578985176327](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1578985176327.png)

13.vue中使用watch的注意事项：

![1581257406574](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1581257406574.png)

14.在egg中使用sequlize关联查询时elementUI的对象显示字段写法:

![1581355055530](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1581355055530.png)

![1581355118546](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1581355118546.png)

15.vue中router-link加上后文字出现下划线的解决方案： //本质上是利用router-link渲染为a标签

![1581958487569](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1581958487569.png)

16.vue中配置路由点击等效果的方案：在new Router对象中加上配置![1581961491275](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1581961491275.png)

后利用a为未点击时候的标签，.router-link-active为点击时候的类书写样式即可：

![1581961618596](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1581961618596.png)

17.Vue的Message.use问题：

![1582089832889](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582089832889.png)

18.vue解决多个同时弹出问题：

main.js中加上以下代码处理:

![1582089896786](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582089896786.png)

![1582089908993](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582089908993.png)

19.配置vue-cli3.0按需加载时出现的错误:

![1582391780815](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582391780815.png)

![1582391800982](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582391800982.png)

20.在vue中使用echarts：

![1582477675470](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582477675470.png)

![1582477688566](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582477688566.png)

![1582478128043](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582478128043.png)

21.修改antd的默认样式，当渲染在body外的解决方法：在类名前加上:global实现只在组件内起作用。

![1582694106271](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582694106271.png)

22.原生方法在某个指定节点前添加HTML字符串：

![1582698446563](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582698446563.png)

23.CSS3瀑布式布局：

![1582709197633](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582709197633.png)

效果：错综混合

![1582709209137](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582709209137.png)

24.react项目eject后 要实现antd的按需引入 只需在package.json文件中：

![1582727156197](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582727156197.png)

25.在react项目中配置alias:npm run eject后在config文件的webpack.config.js文件的resolve配置对象中加上：

![1582727578646](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1582727578646.png)

26.踩坑：BrowserRouter外层整个项目中只需要一个

![1583256209919](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1583256209919.png)

27.vue-router别名的使用及坑:

![1583822020851](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1583822020851.png)

28.在vue中使用react的jsx语法:

![1583994152258](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1583994152258.png)

29.与后端交互时，后端返回一张图片的处理方式:

首先设置封装方法，请求里加一个参数：

![1584189591116](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1584189591116.png)

传入参数，表示返回的数据类型：

![1584189636990](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1584189636990.png)

最后将二进制数据转化为base64数据类型并用require类型引入即可：

![1584189680672](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1584189680672.png)

30.在vue-cli2项目中使用...造成报错unexpected token:

![1584460438597](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1584460438597.png)

解决办法：

![1584460465963](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1584460465963.png)

31.非对称加密中遇到的坑:

![1584878082133](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1584878082133.png)

32.使用mongoose方法api查询出来的结果不能直接对对象进行修改,需要深拷贝到另一个对象上操作:

![1584952704689](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1584952704689.png)

33.koa与express分路由写法的差异：

koa中：所传入的必须是一个函数![1586015404067](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1586015404067.png)

express中：可以直接传入router对象

![1586015434342](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1586015434342.png)

34.KOA中使用sequelize踩坑：



![1587050764312](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1587050764312.png)外键始终绑定不上的原因： 要在同一个sequelize实例下绑定

![1587050751114](C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1587050751114.png)